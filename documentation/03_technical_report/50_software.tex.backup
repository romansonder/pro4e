Im Rahmen des Projektes wurden drei verschiedene Arten von Software entwickelt: 
eine in C geschriebene Firmware für den Dojo, eine ebenfalls in C geschriebene Firmware für die Peripheriegeräte und eine in Java entwickelte PC-Applikation zur Konfiguration des Systems. 
Der Aufbau und die Funktion aller drei Produkte werden nachfolgend erläutert.
Damit das Gesamtbild des Softwarekonzepts verständlich wird, ist es notwendig, zuerst einige Punkte des BLE Standards zu erläutern. 
Aus diesem Grund erfolgt zuerst eine kurze Einführung in das Thema.

\subsection{Kurzeinführung in Bluetooth Low Energy}
Bluetooth Low Energy (kurz BLE) ist wie alle modernen Kommunikationsprotokolle hierarchisch aufgebaut und überstreckt sich über viele Abstraktionsebenen. 
Die \textit{Bluetooth Core Specification 5.0} (siehe \cite{BLE_SPEC} ab Seite 252) definiert verschiedene Layer und Geräterollen. 
Die für das Verständnis des Projekts notwenigen Begriffe sind in Tabelle \ref{tab:BLE} zu sehen.
\begin{table}[h]
  \centering
  \begin{tabular}{|c|c|}
    \hline
    \textbf{Abstraktionsebene} & \textbf{Geräterollen}\\
    \hline
    Link Layer & Advertiser / Scanner / Broadcaster / Observer \\
    \hline
    GAP Layer (Generic Access Profile) & Central / Peripherial \\
    \hline
    GATT Layer (Generic Attribute Profile) & Client / Server \\
    \hline
  \end{tabular}
  \caption{Übersicht über einige Abstraktionsebenen von BLE}\label{tab:BLE}
\end{table}
Auf dem Link Layer werden alle verbindungslosen Vorgänge abgehandelt. Sobald ein Link aufgebaut wurde, 
befindet man sich auf dem GAP Layer. Dort sind alle notwendigen Parameter für den Verbindungsauf- und 
Abbau hinterlegt. Auf der GATT Ebene werden Datenstrukturen und Dienste definiert. 
Ein Broadcaster sendet nur periodisch Daten aus und ist nicht in der Lage, eine Verbindung einzugehen. 
Das fortlaufende Aussenden von Daten nennt man \textit{Advertisen}. Dieser Prozess sorgt dafür, dass Scanner ein
Gerät finden können. Ein Advertisement Package besteht im Minimum aus einer 6 Byte langen Peer-Adresse 
zur Identifikation des Gerätes, diversen Flags, einer optionalen Payload sowie einer Längenangabe für das
Paket, da die Grösse der Payload variabel ist. Ein Beacon ist im Grunde nichts Weiteres als solch ein
Broadcaster.
Ein \textit{Peripherial Device} kann neben dem \textit{Advertisen} auch Verbindungen eingehen.
Es kann auf sogenannte \textit{Scan Requests} antworten und Parameter für die Verbindung anfordern und austauschen. 
Ein \textit{Central Device} ist das passende Gegenstück zum Peripheriegerät. Es verfügt über einen Scanner und 
kann Verbindungen mit umliegenden Peripheriegeräten eröffnen.
Im Projekt sieht die Rollenverteilung folgendermassen aus:
Alle im Projekt involvierten Geräte ausser dem Dojo sind aus Sicht von BLE \textit{Peripherial Devices}. Auch 
die Beacons gehören dazu, da es gemäss Pflichtenheft möglich sein soll, von den Beacons ein Feedback
zu erhalten, sollte der Benutzer den Like-Button gedrückt haben. Damit dies möglich ist, muss kurzfristig 
eine Verbindung aufgebaut werden, um den Beacon zu notifizieren. Per Definition sind die Beacons in
diesem Projekt also keine Beacons, sondern \textit{Peripherial Devices}. Da im Rahmen der Aufgabenstellung immer 
von Beacons gesprochen wurde, wird diese (fehlerhafte) Bezeichnung für die Dokumentation übernommen. 
Der Dojo ist der Kern des Systems und ist ein \textit{Central Device}. Er verfügt über einen Scanner und kann
Verbindungen mit umliegenden Peripheriegeräten eröffnen. Der Dojo selbst wird nie \textit{advertisen} oder auf 
Verbindungen warten. Die Verbindungen zum PC-Dongle, zu den "Beacons" sowie zu den 
Zugangskontrollstationen werden stets von ihm aus eröffnet.
Ein BLE-Gerät kann mehrere solche Profile beinhalten und übt typischerweise mehrere Geräterollen aus. 
Ebenfalls kennt BLE das Konzept von Mehrfachverbindungen. Es können also mehrere solcher Profile in
verschiedenen Instanzen gleichzeitig aktiv sein. Für einen kontrollierten Softwareablauf wurde dies 
jedoch bewusst unterbunden. In Abbildung \ref{} ist das Kommunikationskonzept aus Sicht von BLE dargestellt.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Abbildung ...








\clearpage






\subsection{Grobkonzept}

\subsection{Kurzeinführung in Bluetooth Low Energy}

\subsection{Aufbau des Bluetooth-Moduls}

\subsubsection{Bluetooth-Modul der Peripheriegeräte}






\subsection{Ein- und Ausgabeelemente des Dojos}

Damit der Dojo mit seiner Umwelt agiern kann wird diverse Peripherie benötigt. Als Peripherie werden alle Aktoren und Sensoren betrachtet welche auf dem Dojo angebracht sind. Diese ermöglichen es dem Museumsbesucher mit dem Gerät zu interagieren. Dieser Abschnitt erläutert die wichtigsten Zusammenhänge der einzelnen Peripherieeinheiten. Die Abbildung \ref{fig:p_uebersicht} zeigt die Verbindungen zwischen den einzelnen Komponennten.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{figure}[htb]
\begin{center}
\includegraphics[width=\textwidth]{periphery_uebersicht.jpg}
\caption{Übersicht Periphery} % picture caption
\label{fig:p_uebersicht}
\end{center}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Audiointerface -- wtv020sd.c}
Das Modul wtv020sd.c beinhaltet die Initialisierung und Ansteuerung des Audiochip Wtv020sd \cite{WTV020}. Die Kommunikation zum Audiointerface erfolgt über die Standard GPIO (General Purpose Input Output) des nRF52. Es werden die Pins: Reset, Busy, Clk und Data verwendet. Über das Audiointerface können die Audiofiles der SD-Karte gezielt Abgespielt, Pausiert und die Audioausgabe vermindert oder verstärkt werden. Dabei handelt es sich um 16-Bit Befehle welche über ein SPI (synchroner serieller Datenbus) mit einer Geschwindigkeit von 5kHz gesendet werden.

\subsubsection{Peripherie -- ts3a27518e.c ts4871.c periphery.c }

Im Modul ts4871.c ist definiert mit welchem Pin der Audioverstärker ein- und ausgeschalten werden kann, in diesem Falle ist es der Standbypin (gem. Datenblat \cite{TS4871}). Des weiteren sind im Modul ts3a27518e.c die Pinausgänge für den Multiplexer, zwischen SD-Karte und Audiointerface definiert (gem. Datenblatt \cite{TS3A27518E}). Es kann zwischen Adio- und USB-Modus gewechselt werden.\\
Das Modul periphery.c beinhaltet die Verarbeitung der Tastereingaben und die Ausgabe des Feedbacks über den Vibrator.

\subsection{Hauptprogrammablauf}


\subsection{Java Anwendung}

Um es dem Benutzer so einfach wie möglich zu machen, wurde eine Java Anwendung gestaltet, welche Audiodateien auf den Dojo übertragen kann. Dabei versucht die Anwendung nichts anderes als die SD-Karte im Dojo via USB-Schnittstelle zu erkennen und dann die Audiodateien auf die SD-Karte zu kopieren. Dabei werden die Audiodateien auch gleich so Umbenannt, dass sie zu den entsprechenden Beacons zugeordnet und abgespielt werden können. Da sich immer alle Audiodateien in allen Sprachen auf dem Dojo befinden müssen, muss dieser Schritt auch nur bei neu dazugekommenen Kunstobjekten wiederholt werden. Weiter kann mit der Java Anwendung benutzerspezifische Einstellungen wie Sprache und Zugangsrechte übertragen werden. Dies geschieht jedoch im Gegensatz zu den Audiodateien über BLE, weshalb auch der entsprechende COM-Port von Anwender selektiert werden muss, sowie die BLE Transmitter Station eingesteckt sein muss.

\newpage

\begin{figure}[htb]
	\centering
	\includegraphics[width=\textwidth]{graphics/Java_Anwendung.png}
	\caption{Java Anwendung}
	\label{fig:Java Anwendung}
\end{figure}

Abbildung \ref{fig:Java Anwendung} zeigt die Java Anwendung, in der zurzeit gerade eine Ausstellung mit drei Kunstobjekten (in allen drei Sprachen) geladen ist. Die Idee hinter dem Aufbau der Java Anwendung ist, dass der Benutzer nichts falsch machen kann und auf falsche Aktionen entsprechend hingewiesen wird. Dies wurde mittels informativen Statusmeldungen unten links in der Statusbar umgesetzt.

\begin{figure}[htb]
	\centering
	\includegraphics[width=10cm]{graphics/Dateiname_Konvention.jpeg}
	\caption{Dateiname Konventionen}
	\label{fig:Dateiname Konventionen}
\end{figure}

Abbildung \ref{fig:Dateiname Konventionen} wiederrum zeigt, nach welchen Konventionen der Dateiname der Audiodateien umbenannt wird, damit die Dateien von der Firmware erkannt und abgespielt werden können. In dem Beispiel wird der neue Dateiname des in Abbildung \ref{fig:Java Anwendung} selektierten Kunstobjektes dargestellt. Da dieses Kunstobjekt Audioinformationen in Deutsch bereitstellt, sowie Beacon ID 1 besitzt, enthält auch der neue Dateiname dementsprechend eine 1 als Sprachindex und eine 1 als Beacon ID. Die restlichen Stellen der 4 Ziffern, welche im Dateinamen benötigt werden, werden wie oben ersichtlich mit Nullen als Platzhalter von links nach rechts aufgefüllt. Entsprechend für die anderen Sprachen gäbe es noch einen Sprachindex von 2 für Englisch und eine 3 für Französisch.

\subsection{Lizenzen}

Die in diesem Projekt entwickelte Hard- und Software wird unter den Bedingungen der GNU GPL v3 (GNU General Public License) freigeben. Das komplette Softdevice S132 Version 5.1.0, sowie die SDK  v14.2 (Software Development Kit), welche für die Erstellung der Firmware verwendet wurde, steht dabei unter Lizenz von Nordic. Zudem steht die in Java verwendete Bibliothek simple-xml-2.7.1 unter Lizenz von Apache, sowie die Bibliothek jSSC-2.7.0-Release unter Lizenz von GNU GPL v3.\\
\\
Die originalen Lizenztexte der oben genannten Lizenzen befinden sich in Englischer Sprache im Anhang.